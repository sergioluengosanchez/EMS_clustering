// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// c_hybrid_SEM
List c_hybrid_SEM(Rcpp::NumericMatrix data_r, Rcpp::NumericVector is_directional_r, int num_clusters, int max_parents, bool directional_parents);
RcppExport SEXP _SomaSimulation_c_hybrid_SEM(SEXP data_rSEXP, SEXP is_directional_rSEXP, SEXP num_clustersSEXP, SEXP max_parentsSEXP, SEXP directional_parentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type data_r(data_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type is_directional_r(is_directional_rSEXP);
    Rcpp::traits::input_parameter< int >::type num_clusters(num_clustersSEXP);
    Rcpp::traits::input_parameter< int >::type max_parents(max_parentsSEXP);
    Rcpp::traits::input_parameter< bool >::type directional_parents(directional_parentsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_hybrid_SEM(data_r, is_directional_r, num_clusters, max_parents, directional_parents));
    return rcpp_result_gen;
END_RCPP
}
// geodesic_distance
std::vector<double> geodesic_distance(std::string input_path, int vertex_idx);
RcppExport SEXP _SomaSimulation_geodesic_distance(SEXP input_pathSEXP, SEXP vertex_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_path(input_pathSEXP);
    Rcpp::traits::input_parameter< int >::type vertex_idx(vertex_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(geodesic_distance(input_path, vertex_idx));
    return rcpp_result_gen;
END_RCPP
}
// poly_volume
double poly_volume(NumericMatrix x);
RcppExport SEXP _SomaSimulation_poly_volume(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(poly_volume(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SomaSimulation_c_hybrid_SEM", (DL_FUNC) &_SomaSimulation_c_hybrid_SEM, 5},
    {"_SomaSimulation_geodesic_distance", (DL_FUNC) &_SomaSimulation_geodesic_distance, 2},
    {"_SomaSimulation_poly_volume", (DL_FUNC) &_SomaSimulation_poly_volume, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SomaSimulation(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
