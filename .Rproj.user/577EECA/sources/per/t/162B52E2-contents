# # #Ejecutar justo antes de factorizar
# # angles2<-readRDS("/home/universidad/Dropbox/Articulo soma/Clustering Soma/Paper/rotacion_soma.rds")
# # soma_plot <- soma
# # distances <- soma_plot$distances
# # distances <- distances/max(distances)
# # prop <- cbind(1-distances,distances)
# # col_prop <- matrix(c(131/255,231/255,173/255,125/255,124/255,218/255),ncol=3,nrow=2,byrow=T)
# #
# # vertex_dist <- prop[soma_plot$it,]
# # colors <- vertex_dist%*%col_prop
# # shade3d(soma_plot,col=rgb(colors[,1],colors[,2],colors[,3]),specular="black",alpha=0.5)
# # par3d(angles2)
# #
# # #Una vez generamos las curvas
# # sph_color<-rgb(138/255,138/255,221/255)
# # for(i in 1:length(curve))
# # {
# #   if(i==1 || i==length(curve))
# #   {
# #     rgl.points(rbind(curve[[i]]),col=sph_color,size=15)
# #     rgl.points(rbind(curve[[i]]),col="black",size=16)
# #   }else{
# #     rgl.points(curve[[i]],col=sph_color,size=15)
# #     rgl.points(curve[[i]],col="black",size=16)
# #   }
# # }
# #
# # ##Pintar centroides de las curvas y unir con lineas
# # for(i in 1:length(curve))
# # {
# #   if(i==1)
# #   {
# #     actualMean<-curve[[i]]
# #     rgl.points(rbind(actualMean),col="red",size=15)
# #     rgl.points(rbind(actualMean),col="black",size=16)
# #   }else{
# #     if(i==length(curve)){
# #       actualMean<-curve[[i]]
# #       rgl.points(rbind(actualMean),col="red",size=15)
# #       rgl.points(rbind(actualMean),col="black",size=16)
# #       segments3d(x=c(actualMean[1],lastMean[1]),y=c(actualMean[2],lastMean[2]),z=c(actualMean[3],lastMean[3]),lwd=3)
# #
# #     }else{
# #       actualMean <- colMeans(curve[[i]])
# #       rgl.points(rbind(actualMean),col="red",size=15)
# #       rgl.points(rbind(actualMean),col="black",size=16)
# #       segments3d(x=c(actualMean[1],lastMean[1]),y=c(actualMean[2],lastMean[2]),z=c(actualMean[3],lastMean[3]),lwd=3)
# #     }
# #   }
# #   lastMean<-actualMean
# # }
# #
# # ####Get the soma simplified###
# # soma_parameters <- compute_curve_parameters(soma, insertion_point, curve)
# # header <- c(paste0("h_",1:num_curves), paste0("theta_",2:num_curves), paste0("cos_phi_",2:num_curves), paste0("B_r_",1:(num_curves-1)),paste0("B_R_",1:(num_curves-1)),
# #             paste0("inst_Phi_",1:(num_curves-1)),paste0("inst_Theta_",1:(num_curves-1)))
# #
# # soma_parameters<-t(data.frame(soma_parameters))
# # colnames(soma_parameters) <- header
# # row.names(soma_parameters) <- unlist(list_soma_names)
# # mesh<-simulation3Dmesh(soma_parameters,1,0)
# # vcgOffWrite(mesh, file.path("/home/universidad/prueba.off"))
# # distances <- geodesic_distance("/home/universidad/prueba.off", 0)
# # distances[362]<-distances[363]
# # distances <- distances/max(distances)
# # prop <- cbind(1-distances,distances)
# # vertex_dist <- prop[mesh$it,]
# # colors <- vertex_dist%*%col_prop
# # shade3d(mesh,col=rgb(colors[,1],colors[,2],colors[,3]),specular="black",alpha=0.5)
# #
# # ellipses <- simulation3Dellipses(soma_parameters,1)
# #
# # centroids <- rbind(c(0,0,0),ellipses$skeleton)
# # rgl.points(centroids,col="red",size=15)
# # rgl.points(centroids,col="black",size=16)
# # for(i in 2:nrow(centroids))
# # {
# #   segments3d(x=c(centroids[i-1,1],centroids[i,1]),y=c(centroids[i-1,2],centroids[i,2]),z=c(centroids[i-1,3],centroids[i,3]),lwd=3)
# # }
# #
# # rgl.points(ellipses$vertices,col=sph_color,size=15)
# # rgl.points(ellipses$vertices,col="black",size=16)
# # ##Pintar centroides de las curvas y unir con lineas
#
#
# ########Generar ejemplos clusters####
# readRDS("inst/model_spines.rds")
# path <- "/home/universidad/RStudio Projects/SomaSimulation/data"
# path_complete_neuron = file.path(path,"ao_results")
# path_soma = file.path(path, "sdf_results")
#
# id_soma <-36
# ids <-apply(bestModel$weights,1,which.max)
# soma_names<-read.csv("data/soma_dataset_short.csv")[,1]
#
# file <- soma_names[id_soma]
# ply_ao <- vcgPlyRead(file.path(path_complete_neuron,paste0(file,".ply")))
# ply_sdf <- vcgPlyRead(file.path(path_soma,paste0(file,".ply")))
#
# soma <- vcgIsolated(ply_sdf)
# soma<-vcgClean(soma,sel=0:7)
#
# ply_ao$vertices <- data.table(t(ply_ao$vb[-4,]))
# soma$vertices <- t(soma$vb[-4,])
# bounding_box_sdf <- apply(soma$vertices,2,function(x){return(c(min(x),max(x)))})
#
# apical_dendrite <- ply_ao$vertices[bounding_box_sdf[1,1]<V1 & bounding_box_sdf[2,1]>V1 & bounding_box_sdf[1,3]<V3 & bounding_box_sdf[2,3]>V3 & bounding_box_sdf[1,2]>V2]
# closest_points <- vcgClostKD(as.matrix(apical_dendrite), soma)
# closest_points$vertices <- t(closest_points$vb[-4,])
# mean_closest_point <- colMeans(closest_points$vertices)
#
# insertion_point <- which.min(rowSums((sweep(soma$vertices,2,mean_closest_point))^2))
# vcgOffWrite(soma, file.path("/home/universidad/prueba.off"))
# soma$distances <- geodesic_distance("/home/universidad/prueba.off", insertion_point-1)
#
# angles2<-readRDS("/home/universidad/Dropbox/Articulo soma/Clustering Soma/Paper/rotacion_soma.rds")
# soma_plot <- soma
#
# num_curves<-7
# factorized_model <- factorize_model(soma, num_curves)
# #Corregir direccion de las normales
# soma<-vcgClean(factorized_model$soma, sel=num_curves)
# soma$vertices <- factorized_model$soma$vertices
# soma$distances <- factorized_model$soma$distances
#
# curve <- list()
# for(i in 1:length(factorized_model$limits))
# {
#   if(i==length(factorized_model$limits))
#   {
#     curve[[i]] = soma$vertices[which(soma$distances == max(soma$distances)), ]
#   }else{
#     curve[[i]] = soma$vertices[which(soma$distances == factorized_model$limits[i]), ]
#   }
# }
#
# distances <- soma_plot$distances
# distances <- distances/max(distances)
# prop <- cbind(1-distances,distances)
# col_prop <- matrix(c(131/255,231/255,173/255,125/255,124/255,218/255),ncol=3,nrow=2,byrow=T)
#
# vertex_dist <- prop[soma_plot$it,]
# colors <- vertex_dist%*%col_prop
# shade3d(soma_plot,col=rgb(colors[,1],colors[,2],colors[,3]),specular="black",alpha=0.5)
# par3d(angles2)
#
# #Una vez generamos las curvas
# sph_color<-rgb(138/255,138/255,221/255)
# for(i in 1:length(curve))
# {
#   if(i==1 || i==length(curve))
#   {
#     rgl.points(rbind(curve[[i]]),col=sph_color,size=15)
#     rgl.points(rbind(curve[[i]]),col="black",size=16)
#   }else{
#     rgl.points(curve[[i]],col=sph_color,size=15)
#     rgl.points(curve[[i]],col="black",size=16)
#   }
# }
#
# rgl.snapshot("/home/universidad/Dropbox/Articulo soma/Clustering Soma/Paper/images/cluster2-2.png")
#
# ############Pasos de simulacion###########
# ##########################################
# ##########################################
# id_soma<-7
# ellipsesSpine <- simulation3Dellipses(newSomas,id_soma)
# centroids <- rbind(c(0,0,0),ellipsesSpine$skeleton)
# points3d(centroids,col="red",size=10)
# for(i in 1:(nrow(centroids)-1))
# {
#   segments3d(x=c(centroids[i,1],centroids[i+1,1]),y=c(centroids[i,2],centroids[i+1,2]),z=c(centroids[i,3],centroids[i+1,3]),lwd=3)
# }
# angles3<-readRDS("/home/universidad/Dropbox/Articulo soma/Clustering Soma/Paper/rotacion_simulacion_soma.rds")
# par3d(angles3)
#
# sph_color<-rgb(138/255,138/255,221/255)
# for(i in 1:length(ellipsesSpine$ellipses))
# {
#   if(i==1 || i==length(ellipsesSpine$ellipses))
#   {
#     rgl.points(rbind(ellipsesSpine$ellipses[[i]]),col=sph_color,size=15)
#     rgl.points(rbind(ellipsesSpine$ellipses[[i]]),col="black",size=16)
#   }else{
#     rgl.points(ellipsesSpine$ellipses[[i]],col=sph_color,size=15)
#     rgl.points(ellipsesSpine$ellipses[[i]],col="black",size=16)
#   }
# }
#
# mesh <- simulation3Dmesh(newSomas,id_soma,iterations=0)
# mesh <- vcgClean(mesh,0)
# vcgOffWrite(mesh, file.path("/home/universidad/prueba.off"))
# mesh$distances <- geodesic_distance("/home/universidad/prueba.off", 0)
# distances <- mesh$distances/max(mesh$distances)
#
# col_prop <- matrix(c(131/255,231/255,173/255,125/255,124/255,218/255),ncol=3,nrow=2,byrow=T)
# prop <- cbind(1-distances,distances)
# vertex_dist <- prop[mesh$it,]
# colors <- vertex_dist%*%col_prop
# shade3d(mesh,col=rgb(colors[,1],colors[,2],colors[,3]),specular="black",alpha=0.5)
# #
# # mesh <- simulation3Dmesh(newSomas,1,iterations=1)
# # vcgOffWrite(mesh, file.path("/home/universidad/prueba.off"))
# # mesh$distances <- geodesic_distance("/home/universidad/prueba.off", 0)
# # distances <- mesh$distances/max(mesh$distances)
# #
# # col_prop <- matrix(c(131/255,231/255,173/255,125/255,124/255,218/255),ncol=3,nrow=2,byrow=T)
# # prop <- cbind(1-distances,distances)
# # vertex_dist <- prop[mesh$it,]
# # colors <- vertex_dist%*%col_prop
# # shade3d(mesh,col=rgb(colors[,1],colors[,2],colors[,3]),specular="black",alpha=0.5)
